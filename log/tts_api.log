2024-08-05 15:27:55,918 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:27:55,918 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:28:04,746 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:28:04,747 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:30:15,410 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:30:15,410 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:30:35,243 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:30:35,244 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:31:19,118 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:31:19,118 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:34:59,825 | INFO | tts.py | 45 | <module> | =================== tts korean models ===================
2024-08-05 15:34:59,825 | INFO | tts.py | 47 | <module> | init model device: cuda:0
2024-08-05 15:35:53,938 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:43,929 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:47,436 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:47,988 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:48,172 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:48,376 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:48,736 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:49,142 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:49,331 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:49,560 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:49,771 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:50,246 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:50,446 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:51,028 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:51,244 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:51,483 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:52,025 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:52,254 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:53,863 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:54,073 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:54,301 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:49:54,517 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 15:58:12,027 | INFO | voice_info.py | 30 | voice | /voice
2024-08-05 16:02:23,504 | INFO | tts.py | 48 | <module> | =================== tts korean models ===================
2024-08-05 16:02:23,504 | INFO | tts.py | 50 | <module> | init model device: cuda:0
2024-08-05 16:07:05,850 | INFO | tts.py | 49 | <module> | =================== tts korean models ===================
2024-08-05 16:07:05,850 | INFO | tts.py | 51 | <module> | init model device: cuda:0
2024-08-05 16:07:26,364 | INFO | tts.py | 123 | generate | /text-to-speech
2024-08-05 16:07:26,365 | DEBUG | tts.py | 132 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 16:07:26,365 | DEBUG | tts.py | 133 | generate | voice id: b540ea02-6c7a-478e-9e60-5d766118f84a
2024-08-05 16:07:26,365 | DEBUG | tts.py | 134 | generate | text: 안녕하세요
2024-08-05 16:07:26,365 | DEBUG | tts.py | 135 | generate | language code: kr
2024-08-05 16:07:26,365 | DEBUG | tts.py | 143 | generate | using device: cuda:0
2024-08-05 16:07:33,423 | INFO | tts.py | 149 | generate | /text-to-speech complete
2024-08-05 16:08:29,467 | INFO | tts.py | 123 | generate | /text-to-speech
2024-08-05 16:08:29,467 | DEBUG | tts.py | 132 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 16:08:29,467 | DEBUG | tts.py | 133 | generate | voice id: b540ea02-6c7a-478e-9e60-5d766118f84a
2024-08-05 16:08:29,467 | DEBUG | tts.py | 134 | generate | text: 하지만 은솔이는 자기를 따라하는 자경이 때문에 약이 올랐습니다.
2024-08-05 16:08:29,467 | DEBUG | tts.py | 135 | generate | language code: kr
2024-08-05 16:08:29,467 | DEBUG | tts.py | 143 | generate | using device: cuda:0
2024-08-05 16:08:29,886 | INFO | tts.py | 149 | generate | /text-to-speech complete
2024-08-05 16:09:17,269 | INFO | tts.py | 123 | generate | /text-to-speech
2024-08-05 16:09:17,269 | DEBUG | tts.py | 132 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 16:09:17,269 | DEBUG | tts.py | 133 | generate | voice id: b540ea02-6c7a-478e-9e60-5d766118f84a
2024-08-05 16:09:17,269 | DEBUG | tts.py | 134 | generate | text: 나 화났으니 말걸지마 하는 눈치가 온몸에서 느껴졌지요.
2024-08-05 16:09:17,269 | DEBUG | tts.py | 135 | generate | language code: kr
2024-08-05 16:09:17,269 | DEBUG | tts.py | 143 | generate | using device: cuda:0
2024-08-05 16:09:17,612 | INFO | tts.py | 149 | generate | /text-to-speech complete
2024-08-05 16:25:04,528 | INFO | config.py | 40 | <module> | =============== provided voices ============
2024-08-05 16:25:04,528 | INFO | config.py | 41 | <module> | [Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 16:25:04,528 | INFO | config.py | 43 | <module> | ============== model-voice dict ============
2024-08-05 16:25:04,528 | INFO | config.py | 44 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': '407f4e67-a488-479f-a807-271e1b66dab0'}
2024-08-05 16:27:19,281 | INFO | config.py | 44 | <module> | =============== provided voices ============
2024-08-05 16:27:19,281 | INFO | config.py | 45 | <module> | [Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 16:27:19,282 | INFO | config.py | 47 | <module> | ============== model-voice dict ============
2024-08-05 16:27:19,282 | INFO | config.py | 48 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '2c2f8911-7a67-446c-aadf-9b8397eb1d76', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 16:33:02,042 | INFO | config.py | 44 | <module> | =============== provided voices ============
2024-08-05 16:33:02,043 | INFO | config.py | 45 | <module> | [Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 16:33:02,043 | INFO | config.py | 47 | <module> | ============== model-voice dict ============
2024-08-05 16:33:02,043 | INFO | config.py | 48 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '2c2f8911-7a67-446c-aadf-9b8397eb1d76', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 16:42:25,844 | INFO | tts.py | 123 | generate | /text-to-speech
2024-08-05 16:42:25,845 | DEBUG | tts.py | 132 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 16:42:25,845 | DEBUG | tts.py | 133 | generate | voice id: b540ea02-6c7a-478e-9e60-5d766118f84a
2024-08-05 16:42:25,845 | DEBUG | tts.py | 134 | generate | text: 열심히 일해서 성과내주면 뭐하나.. 지잘난줄아는데..
2024-08-05 16:42:25,845 | DEBUG | tts.py | 135 | generate | language code: kr
2024-08-05 16:42:25,845 | DEBUG | tts.py | 143 | generate | using device: cuda:0
2024-08-05 16:42:26,215 | INFO | tts.py | 149 | generate | /text-to-speech complete
2024-08-05 16:43:03,590 | INFO | tts.py | 123 | generate | /text-to-speech
2024-08-05 16:43:03,590 | DEBUG | tts.py | 132 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 16:43:03,590 | DEBUG | tts.py | 133 | generate | voice id: b540ea02-6c7a-478e-9e60-5d766118f84a
2024-08-05 16:43:03,590 | DEBUG | tts.py | 134 | generate | text: 프랑스 올림픽에서 금메달 9개로 현재 6위를 달리고 있습니다.
2024-08-05 16:43:03,591 | DEBUG | tts.py | 135 | generate | language code: kr
2024-08-05 16:43:03,591 | DEBUG | tts.py | 143 | generate | using device: cuda:0
2024-08-05 16:43:03,945 | INFO | tts.py | 149 | generate | /text-to-speech complete
2024-08-05 17:17:53,058 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-05 17:17:53,059 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 17:17:53,059 | INFO | config.py | 48 | <module> | ============== model-voice dict ============
2024-08-05 17:17:53,059 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 17:20:42,711 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-05 17:20:42,711 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 17:20:42,711 | INFO | config.py | 48 | <module> | ============== model-voice dict ============
2024-08-05 17:20:42,711 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 17:22:10,583 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-05 17:22:10,584 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 17:22:10,584 | INFO | config.py | 48 | <module> | ============== model-voice dict ============
2024-08-05 17:22:10,584 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 17:26:26,732 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-05 17:26:26,732 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-05 17:26:26,732 | INFO | config.py | 48 | <module> | ============== model-voice dict ============
2024-08-05 17:26:26,732 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-05 17:26:29,621 | INFO | tts.py | 72 | <module> | tts voice count: 1
2024-08-05 17:26:29,622 | INFO | tts.py | 73 | <module> | =================== loaded tts models ===================
2024-08-05 17:26:29,622 | INFO | tts.py | 74 | <module> | [TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)]
2024-08-05 17:27:37,526 | INFO | tts.py | 145 | generate | /text-to-speech
2024-08-05 17:27:37,527 | DEBUG | tts.py | 154 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-05 17:27:37,527 | DEBUG | tts.py | 155 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-05 17:27:37,527 | DEBUG | tts.py | 156 | generate | text: 안녕하세요
2024-08-05 17:27:37,527 | DEBUG | tts.py | 157 | generate | language code: kr
2024-08-05 17:27:37,527 | DEBUG | tts.py | 173 | generate | using device: cuda:0
2024-08-05 17:27:37,527 | ERROR | tts.py | 111 | _generate | 'HParams' object has no attribute 'KR'
2024-08-05 17:27:37,527 | ERROR | tts.py | 185 | generate | generate wave file failed.
2024-08-06 09:29:03,917 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 09:29:03,917 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 09:29:03,917 | INFO | config.py | 48 | <module> | ============== model-voice dict ============
2024-08-06 09:29:03,917 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 09:29:03,917 | INFO | tts.py | 56 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 09:29:03,917 | INFO | tts.py | 59 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 09:29:07,824 | INFO | tts.py | 75 | <module> | tts voice count: 1
2024-08-06 09:29:07,824 | INFO | tts.py | 76 | <module> | =================== loaded tts models ===================
2024-08-06 09:31:37,115 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 09:31:37,115 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 09:31:37,115 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 09:31:37,115 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 09:31:37,115 | INFO | tts.py | 56 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 09:31:37,115 | INFO | tts.py | 59 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 09:31:39,533 | INFO | tts.py | 75 | <module> | tts voice count: 1
2024-08-06 09:31:39,534 | INFO | tts.py | 76 | <module> | =================== loaded tts models ===================
2024-08-06 09:31:39,534 | INFO | tts.py | 78 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 09:36:51,792 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 09:36:51,792 | DEBUG | tts.py | 159 | generate | model id: 
2024-08-06 09:36:51,792 | DEBUG | tts.py | 160 | generate | voice id: 
2024-08-06 09:36:51,792 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 09:36:51,792 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 09:37:46,541 | INFO | voice_info.py | 30 | voice | /voice
2024-08-06 09:40:49,366 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 09:40:49,366 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 09:40:49,366 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 09:40:49,366 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 09:40:49,366 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 09:40:49,366 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 09:40:49,366 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 09:40:49,368 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 09:40:49,368 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:11:49,767 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:11:49,768 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:11:49,768 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:11:49,768 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:11:49,768 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:11:49,768 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:11:49,768 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:11:49,768 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:11:49,768 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:11:50,715 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:11:50,715 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:11:50,715 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:11:50,715 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:11:50,715 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:11:50,715 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:11:50,715 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:11:50,716 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:11:50,716 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:11:51,604 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:11:51,605 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:11:51,605 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:11:51,605 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:11:51,605 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:11:51,605 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:11:51,605 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:11:51,605 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:11:51,605 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:15:46,146 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:15:46,146 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:15:46,146 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:15:46,146 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:15:46,146 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:15:46,146 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:15:46,146 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:15:46,147 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:15:46,147 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:15:46,825 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:15:46,825 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:15:46,825 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:15:46,825 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:15:46,825 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:15:46,825 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:15:46,826 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:15:46,826 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:15:46,826 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:15:47,456 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:15:47,457 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:15:47,457 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:15:47,457 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:15:47,457 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:15:47,457 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:15:47,457 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:15:47,457 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:15:47,457 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:17:55,169 | INFO | voice_info.py | 30 | voice | /voice
2024-08-06 10:18:00,836 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:18:00,836 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:18:00,837 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:18:00,837 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:18:00,837 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:18:00,837 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:18:00,837 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:18:00,837 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:18:00,837 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:18:03,118 | INFO | tts.py | 150 | generate | /text-to-speech
2024-08-06 10:18:03,118 | DEBUG | tts.py | 159 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:18:03,118 | DEBUG | tts.py | 160 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:18:03,118 | DEBUG | tts.py | 161 | generate | text: 안녕하세요
2024-08-06 10:18:03,118 | DEBUG | tts.py | 162 | generate | language code: kr
2024-08-06 10:18:03,118 | DEBUG | tts.py | 178 | generate | using device: cuda:0
2024-08-06 10:18:03,118 | DEBUG | tts.py | 108 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:18:03,119 | ERROR | tts.py | 116 | _generate | 'kr'
2024-08-06 10:18:03,119 | ERROR | tts.py | 190 | generate | generate wave file failed.
2024-08-06 10:37:36,414 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:37:36,414 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:37:36,414 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:37:36,414 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:37:36,414 | INFO | tts.py | 62 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:37:36,414 | INFO | tts.py | 65 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:37:38,977 | INFO | tts.py | 81 | <module> | tts voice count: 1
2024-08-06 10:37:38,977 | INFO | tts.py | 82 | <module> | =================== loaded tts models ===================
2024-08-06 10:37:38,977 | INFO | tts.py | 84 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:37:51,344 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:51,344 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:51,344 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:51,345 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:51,345 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:52,487 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:52,487 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:52,487 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:52,487 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:52,487 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:53,219 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:53,220 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:53,220 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:53,220 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:53,220 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:53,883 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:53,883 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:53,883 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:53,883 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:53,883 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:54,499 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:54,499 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:54,499 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:54,499 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:54,499 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:55,659 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:55,659 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:55,659 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:55,659 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:55,659 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:56,636 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:56,636 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:56,636 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:56,636 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:56,636 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:57,853 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:57,854 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:57,854 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:57,854 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:57,854 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:58,719 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:58,719 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:58,719 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:58,719 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:58,719 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:37:59,553 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:37:59,553 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:37:59,553 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:37:59,553 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:37:59,554 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:38:05,751 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:38:05,752 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:38:05,752 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:38:05,752 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:38:05,752 | DEBUG | tts.py | 176 | generate | language code: None
2024-08-06 10:38:43,606 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:38:43,606 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:38:43,606 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:38:43,606 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:38:43,606 | INFO | tts.py | 62 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:38:43,606 | INFO | tts.py | 65 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:38:46,054 | INFO | tts.py | 81 | <module> | tts voice count: 1
2024-08-06 10:38:46,054 | INFO | tts.py | 82 | <module> | =================== loaded tts models ===================
2024-08-06 10:38:46,054 | INFO | tts.py | 84 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:40:02,941 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:40:02,941 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:40:02,941 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:40:02,941 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:40:02,941 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:40:02,941 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:40:02,941 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:40:02,943 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:40:02,943 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:41:41,446 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:41:41,447 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:41:41,447 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:41:41,447 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:41:41,447 | INFO | tts.py | 62 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:41:41,447 | INFO | tts.py | 65 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:41:43,959 | INFO | tts.py | 81 | <module> | tts voice count: 1
2024-08-06 10:41:43,959 | INFO | tts.py | 82 | <module> | =================== loaded tts models ===================
2024-08-06 10:41:43,959 | INFO | tts.py | 84 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:42:11,624 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:42:11,624 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:42:11,624 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:42:11,624 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:42:11,624 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:42:11,624 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:42:11,625 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:42:11,626 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:42:11,626 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:42:14,832 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:42:14,832 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:42:14,832 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:42:14,832 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:42:14,832 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:42:14,832 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:42:14,832 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:42:14,833 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:42:14,833 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:42:15,795 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:42:15,795 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:42:15,795 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:42:15,795 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:42:15,795 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:42:15,795 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:42:15,795 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:42:15,795 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:42:15,795 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:42:16,475 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:42:16,475 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:42:16,476 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:42:16,476 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:42:16,476 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:42:16,476 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:42:16,476 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:42:16,476 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:42:16,476 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:43:46,175 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:43:46,175 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:43:46,175 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:43:46,175 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:43:46,175 | INFO | tts.py | 62 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:43:46,176 | INFO | tts.py | 65 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:43:48,605 | INFO | tts.py | 81 | <module> | tts voice count: 1
2024-08-06 10:43:48,605 | INFO | tts.py | 82 | <module> | =================== loaded tts models ===================
2024-08-06 10:43:48,605 | INFO | tts.py | 84 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:43:59,095 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:43:59,095 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:43:59,095 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:43:59,095 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:43:59,095 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:43:59,096 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:43:59,096 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:43:59,097 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:43:59,097 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:44:15,757 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:44:15,757 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:44:15,757 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:44:15,757 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:44:15,757 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:44:15,757 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:44:15,757 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:44:15,757 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:44:15,758 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:44:17,303 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:44:17,303 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:44:17,303 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:44:17,303 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:44:17,303 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:44:17,303 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:44:17,303 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:44:17,304 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:44:17,304 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:44:18,333 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:44:18,333 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:44:18,333 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:44:18,333 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:44:18,333 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:44:18,333 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:44:18,333 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:44:18,334 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:44:18,334 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:44:19,266 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:44:19,266 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:44:19,266 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:44:19,266 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:44:19,266 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:44:19,266 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:44:19,266 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:44:19,267 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:44:19,267 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:46:38,508 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:46:38,508 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:46:38,508 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:46:38,508 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:46:38,508 | INFO | tts.py | 62 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:46:38,508 | INFO | tts.py | 65 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:46:40,886 | INFO | tts.py | 81 | <module> | tts voice count: 1
2024-08-06 10:46:40,887 | INFO | tts.py | 82 | <module> | =================== loaded tts models ===================
2024-08-06 10:46:40,887 | INFO | tts.py | 84 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:46:42,669 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:46:42,669 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:46:42,669 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:46:42,670 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:46:42,670 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:46:42,670 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:46:42,670 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:46:42,671 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:46:42,671 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:46:45,029 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:46:45,029 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:46:45,029 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:46:45,029 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:46:45,029 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:46:45,029 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:46:45,029 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:46:45,030 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:46:45,030 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:46:45,667 | INFO | tts.py | 164 | generate | /text-to-speech
2024-08-06 10:46:45,668 | DEBUG | tts.py | 173 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:46:45,668 | DEBUG | tts.py | 174 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:46:45,668 | DEBUG | tts.py | 175 | generate | text: 안녕하세요
2024-08-06 10:46:45,668 | DEBUG | tts.py | 176 | generate | language code: kr
2024-08-06 10:46:45,668 | DEBUG | tts.py | 192 | generate | using device: cuda:0
2024-08-06 10:46:45,668 | DEBUG | tts.py | 115 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:46:45,668 | ERROR | tts.py | 130 | _generate | 'kr'
2024-08-06 10:46:45,668 | ERROR | tts.py | 204 | generate | generate wave file failed.
2024-08-06 10:48:41,147 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:48:41,148 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:48:41,148 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:48:41,148 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:48:41,148 | INFO | tts.py | 64 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:48:41,148 | INFO | tts.py | 67 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:48:43,688 | INFO | tts.py | 83 | <module> | tts voice count: 1
2024-08-06 10:48:43,688 | INFO | tts.py | 84 | <module> | =================== loaded tts models ===================
2024-08-06 10:48:43,688 | INFO | tts.py | 86 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:48:45,833 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:48:45,833 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:48:45,833 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:48:45,833 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:48:45,833 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:48:45,833 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:48:45,833 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:48:45,835 | ERROR | tts.py | 132 | _generate | 'kr'
2024-08-06 10:48:45,835 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:48:48,250 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:48:48,250 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:48:48,250 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:48:48,250 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:48:48,250 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:48:48,251 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:48:48,251 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:48:48,251 | ERROR | tts.py | 132 | _generate | 'kr'
2024-08-06 10:48:48,251 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:48:48,739 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:48:48,739 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:48:48,739 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:48:48,739 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:48:48,739 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:48:48,739 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:48:48,739 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:48:48,740 | ERROR | tts.py | 132 | _generate | 'kr'
2024-08-06 10:48:48,740 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:48:50,170 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:48:50,170 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:48:50,170 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:48:50,170 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:48:50,170 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:48:50,170 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:48:50,170 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:48:50,171 | ERROR | tts.py | 132 | _generate | 'kr'
2024-08-06 10:48:50,171 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:50:08,232 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:50:08,232 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:50:08,232 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:50:08,232 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:50:08,232 | INFO | tts.py | 64 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:50:08,232 | INFO | tts.py | 67 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:50:09,578 | INFO | tts.py | 83 | <module> | tts voice count: 1
2024-08-06 10:50:09,579 | INFO | tts.py | 84 | <module> | =================== loaded tts models ===================
2024-08-06 10:50:09,579 | INFO | tts.py | 86 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:50:20,849 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:50:20,849 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:50:20,849 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:50:20,849 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:50:20,849 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:50:20,849 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:50:20,849 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:50:20,850 | ERROR | tts.py | 132 | _generate | 'kr'
2024-08-06 10:50:20,851 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:53:14,853 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:53:14,853 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:53:14,853 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:53:14,853 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:53:14,853 | INFO | tts.py | 64 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:53:14,853 | INFO | tts.py | 67 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:53:17,326 | INFO | tts.py | 83 | <module> | tts voice count: 1
2024-08-06 10:53:17,327 | INFO | tts.py | 84 | <module> | =================== loaded tts models ===================
2024-08-06 10:53:17,327 | INFO | tts.py | 86 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:53:18,647 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:53:18,648 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:53:18,648 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:53:18,648 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:53:18,648 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:53:18,648 | DEBUG | tts.py | 194 | generate | using device: cuda:0
2024-08-06 10:53:18,648 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:53:18,649 | ERROR | tts.py | 132 | _generate | error: 'kr'
2024-08-06 10:53:18,649 | ERROR | tts.py | 206 | generate | generate wave file failed.
2024-08-06 10:54:22,179 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 10:54:22,179 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 10:54:22,179 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 10:54:22,179 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 10:54:22,179 | INFO | tts.py | 64 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 10:54:22,179 | INFO | tts.py | 67 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 10:54:24,209 | INFO | tts.py | 83 | <module> | tts voice count: 1
2024-08-06 10:54:24,210 | INFO | tts.py | 84 | <module> | =================== loaded tts models ===================
2024-08-06 10:54:24,210 | INFO | tts.py | 86 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 10:55:17,819 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:55:17,820 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:55:17,820 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:55:17,820 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:55:17,820 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:55:17,820 | INFO | tts.py | 194 | generate | model's hyperparameter: {'train': {'log_interval': 200, 'eval_interval': 1000, 'seed': 52, 'epochs': 10000, 'learning_rate': 0.0003, 'betas': [0.8, 0.99], 'eps': 1e-09, 'batch_size': 16, 'fp16_run': False, 'lr_decay': 0.999875, 'segment_size': 16384, 'init_lr_ratio': 1, 'warmup_epochs': 0, 'c_mel': 45, 'c_kl': 1.0, 'skip_optimizer': True}, 'data': {'training_files': 'data/F-A2-B-021-0101/train.list', 'validation_files': 'data/F-A2-B-021-0101/val.list', 'max_wav_value': 32768.0, 'sampling_rate': 44100, 'filter_length': 2048, 'hop_length': 512, 'win_length': 2048, 'n_mel_channels': 128, 'mel_fmin': 0.0, 'mel_fmax': None, 'add_blank': True, 'n_speakers': 1, 'cleaned_text': True, 'spk2id': {'KR': 0}}, 'model': {'use_spk_conditioned_encoder': True, 'use_noise_scaled_mas': True, 'use_mel_posterior_encoder': False, 'use_duration_discriminator': True, 'inter_channels': 192, 'hidden_channels': 192, 'filter_channels': 768, 'n_heads': 2, 'n_layers': 6, 'n_layers_trans_flow': 3, 'kernel_size': 3, 'p_dropout': 0.1, 'resblock': '1', 'resblock_kernel_sizes': [3, 7, 11], 'resblock_dilation_sizes': [[1, 3, 5], [1, 3, 5], [1, 3, 5]], 'upsample_rates': [8, 8, 2, 2, 2], 'upsample_initial_channel': 512, 'upsample_kernel_sizes': [16, 16, 8, 2, 2], 'n_layers_q': 3, 'use_spectral_norm': False, 'gin_channels': 256}, 'num_languages': 8, 'num_tones': 16, 'symbols': ['_', '"', '(', ')', '*', '/', ':', 'AA', 'E', 'EE', 'En', 'N', 'OO', 'Q', 'V', '[', '\\', ']', '^', 'a', 'a:', 'aa', 'ae', 'ah', 'ai', 'an', 'ang', 'ao', 'aw', 'ay', 'b', 'by', 'c', 'ch', 'd', 'dh', 'dy', 'e', 'e:', 'eh', 'ei', 'en', 'eng', 'er', 'ey', 'f', 'g', 'gy', 'h', 'hh', 'hy', 'i', 'i0', 'i:', 'ia', 'ian', 'iang', 'iao', 'ie', 'ih', 'in', 'ing', 'iong', 'ir', 'iu', 'iy', 'j', 'jh', 'k', 'ky', 'l', 'm', 'my', 'n', 'ng', 'ny', 'o', 'o:', 'ong', 'ou', 'ow', 'oy', 'p', 'py', 'q', 'r', 'ry', 's', 'sh', 't', 'th', 'ts', 'ty', 'u', 'u:', 'ua', 'uai', 'uan', 'uang', 'uh', 'ui', 'un', 'uo', 'uw', 'v', 'van', 've', 'vn', 'w', 'x', 'y', 'z', 'zh', 'zy', '~', 'æ', 'ç', 'ð', 'ø', 'ŋ', 'œ', 'ɐ', 'ɑ', 'ɒ', 'ɔ', 'ɕ', 'ə', 'ɛ', 'ɜ', 'ɡ', 'ɣ', 'ɥ', 'ɦ', 'ɪ', 'ɫ', 'ɬ', 'ɭ', 'ɯ', 'ɲ', 'ɵ', 'ɸ', 'ɹ', 'ɾ', 'ʁ', 'ʃ', 'ʊ', 'ʌ', 'ʎ', 'ʏ', 'ʑ', 'ʒ', 'ʝ', 'ʲ', 'ˈ', 'ˌ', 'ː', '̃', '̩', 'β', 'θ', 'ᄀ', 'ᄁ', 'ᄂ', 'ᄃ', 'ᄄ', 'ᄅ', 'ᄆ', 'ᄇ', 'ᄈ', 'ᄉ', 'ᄊ', 'ᄋ', 'ᄌ', 'ᄍ', 'ᄎ', 'ᄏ', 'ᄐ', 'ᄑ', 'ᄒ', 'ᅡ', 'ᅢ', 'ᅣ', 'ᅤ', 'ᅥ', 'ᅦ', 'ᅧ', 'ᅨ', 'ᅩ', 'ᅪ', 'ᅫ', 'ᅬ', 'ᅭ', 'ᅮ', 'ᅯ', 'ᅰ', 'ᅱ', 'ᅲ', 'ᅳ', 'ᅴ', 'ᅵ', 'ᆨ', 'ᆫ', 'ᆮ', 'ᆯ', 'ᆷ', 'ᆸ', 'ᆼ', 'ㄸ', '!', '?', '…', ',', '.', "'", '-', '¿', '¡', 'SP', 'UNK']}
2024-08-06 10:55:17,820 | DEBUG | tts.py | 195 | generate | using device: cuda:0
2024-08-06 10:55:17,820 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:55:17,821 | ERROR | tts.py | 132 | _generate | error: 'kr'
2024-08-06 10:55:17,821 | ERROR | tts.py | 207 | generate | generate wave file failed.
2024-08-06 10:55:19,437 | INFO | tts.py | 166 | generate | /text-to-speech
2024-08-06 10:55:19,437 | DEBUG | tts.py | 175 | generate | model id: 6c8d49f3-50b4-4025-bf5b-16e813a2686d
2024-08-06 10:55:19,437 | DEBUG | tts.py | 176 | generate | voice id: 2c2f8911-7a67-446c-aadf-9b8397eb1d76
2024-08-06 10:55:19,437 | DEBUG | tts.py | 177 | generate | text: 안녕하세요
2024-08-06 10:55:19,437 | DEBUG | tts.py | 178 | generate | language code: kr
2024-08-06 10:55:19,437 | INFO | tts.py | 194 | generate | model's hyperparameter: {'train': {'log_interval': 200, 'eval_interval': 1000, 'seed': 52, 'epochs': 10000, 'learning_rate': 0.0003, 'betas': [0.8, 0.99], 'eps': 1e-09, 'batch_size': 16, 'fp16_run': False, 'lr_decay': 0.999875, 'segment_size': 16384, 'init_lr_ratio': 1, 'warmup_epochs': 0, 'c_mel': 45, 'c_kl': 1.0, 'skip_optimizer': True}, 'data': {'training_files': 'data/F-A2-B-021-0101/train.list', 'validation_files': 'data/F-A2-B-021-0101/val.list', 'max_wav_value': 32768.0, 'sampling_rate': 44100, 'filter_length': 2048, 'hop_length': 512, 'win_length': 2048, 'n_mel_channels': 128, 'mel_fmin': 0.0, 'mel_fmax': None, 'add_blank': True, 'n_speakers': 1, 'cleaned_text': True, 'spk2id': {'KR': 0}}, 'model': {'use_spk_conditioned_encoder': True, 'use_noise_scaled_mas': True, 'use_mel_posterior_encoder': False, 'use_duration_discriminator': True, 'inter_channels': 192, 'hidden_channels': 192, 'filter_channels': 768, 'n_heads': 2, 'n_layers': 6, 'n_layers_trans_flow': 3, 'kernel_size': 3, 'p_dropout': 0.1, 'resblock': '1', 'resblock_kernel_sizes': [3, 7, 11], 'resblock_dilation_sizes': [[1, 3, 5], [1, 3, 5], [1, 3, 5]], 'upsample_rates': [8, 8, 2, 2, 2], 'upsample_initial_channel': 512, 'upsample_kernel_sizes': [16, 16, 8, 2, 2], 'n_layers_q': 3, 'use_spectral_norm': False, 'gin_channels': 256}, 'num_languages': 8, 'num_tones': 16, 'symbols': ['_', '"', '(', ')', '*', '/', ':', 'AA', 'E', 'EE', 'En', 'N', 'OO', 'Q', 'V', '[', '\\', ']', '^', 'a', 'a:', 'aa', 'ae', 'ah', 'ai', 'an', 'ang', 'ao', 'aw', 'ay', 'b', 'by', 'c', 'ch', 'd', 'dh', 'dy', 'e', 'e:', 'eh', 'ei', 'en', 'eng', 'er', 'ey', 'f', 'g', 'gy', 'h', 'hh', 'hy', 'i', 'i0', 'i:', 'ia', 'ian', 'iang', 'iao', 'ie', 'ih', 'in', 'ing', 'iong', 'ir', 'iu', 'iy', 'j', 'jh', 'k', 'ky', 'l', 'm', 'my', 'n', 'ng', 'ny', 'o', 'o:', 'ong', 'ou', 'ow', 'oy', 'p', 'py', 'q', 'r', 'ry', 's', 'sh', 't', 'th', 'ts', 'ty', 'u', 'u:', 'ua', 'uai', 'uan', 'uang', 'uh', 'ui', 'un', 'uo', 'uw', 'v', 'van', 've', 'vn', 'w', 'x', 'y', 'z', 'zh', 'zy', '~', 'æ', 'ç', 'ð', 'ø', 'ŋ', 'œ', 'ɐ', 'ɑ', 'ɒ', 'ɔ', 'ɕ', 'ə', 'ɛ', 'ɜ', 'ɡ', 'ɣ', 'ɥ', 'ɦ', 'ɪ', 'ɫ', 'ɬ', 'ɭ', 'ɯ', 'ɲ', 'ɵ', 'ɸ', 'ɹ', 'ɾ', 'ʁ', 'ʃ', 'ʊ', 'ʌ', 'ʎ', 'ʏ', 'ʑ', 'ʒ', 'ʝ', 'ʲ', 'ˈ', 'ˌ', 'ː', '̃', '̩', 'β', 'θ', 'ᄀ', 'ᄁ', 'ᄂ', 'ᄃ', 'ᄄ', 'ᄅ', 'ᄆ', 'ᄇ', 'ᄈ', 'ᄉ', 'ᄊ', 'ᄋ', 'ᄌ', 'ᄍ', 'ᄎ', 'ᄏ', 'ᄐ', 'ᄑ', 'ᄒ', 'ᅡ', 'ᅢ', 'ᅣ', 'ᅤ', 'ᅥ', 'ᅦ', 'ᅧ', 'ᅨ', 'ᅩ', 'ᅪ', 'ᅫ', 'ᅬ', 'ᅭ', 'ᅮ', 'ᅯ', 'ᅰ', 'ᅱ', 'ᅲ', 'ᅳ', 'ᅴ', 'ᅵ', 'ᆨ', 'ᆫ', 'ᆮ', 'ᆯ', 'ᆷ', 'ᆸ', 'ᆼ', 'ㄸ', '!', '?', '…', ',', '.', "'", '-', '¿', '¡', 'SP', 'UNK']}
2024-08-06 10:55:19,437 | DEBUG | tts.py | 195 | generate | using device: cuda:0
2024-08-06 10:55:19,437 | DEBUG | tts.py | 117 | _generate | speaker ids: {'KR': 0}
2024-08-06 10:55:19,437 | ERROR | tts.py | 132 | _generate | error: 'kr'
2024-08-06 10:55:19,437 | ERROR | tts.py | 207 | generate | generate wave file failed.
2024-08-06 11:08:25,186 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:08:25,186 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:08:25,186 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:08:25,186 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:08:25,186 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:08:25,186 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:08:27,774 | INFO | tts.py | 84 | <module> | tts voice count: 1
2024-08-06 11:08:27,774 | INFO | tts.py | 85 | <module> | =================== loaded tts models ===================
2024-08-06 11:08:27,774 | INFO | tts.py | 87 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:08:27,781 | ERROR | tts.py | 100 | <module> | 'kr'
2024-08-06 11:11:21,786 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:11:21,786 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:11:21,786 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:11:21,786 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:11:21,786 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:11:21,786 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:11:23,186 | INFO | tts.py | 84 | <module> | tts voice count: 1
2024-08-06 11:11:23,187 | INFO | tts.py | 85 | <module> | =================== loaded tts models ===================
2024-08-06 11:11:23,187 | INFO | tts.py | 87 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:11:23,193 | ERROR | tts.py | 100 | <module> | tts_to_file() missing 1 required positional argument: 'speaker_id'
2024-08-06 11:12:06,856 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:12:06,857 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:12:06,857 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:12:06,857 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:12:06,857 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:12:06,857 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:12:09,092 | INFO | tts.py | 84 | <module> | tts voice count: 1
2024-08-06 11:12:09,092 | INFO | tts.py | 85 | <module> | =================== loaded tts models ===================
2024-08-06 11:12:09,093 | INFO | tts.py | 87 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:12:09,099 | ERROR | tts.py | 100 | <module> | 'kr'
2024-08-06 11:16:18,595 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:16:18,595 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:16:18,595 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:16:18,595 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:16:18,595 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:16:18,595 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:16:21,222 | INFO | tts.py | 84 | <module> | tts voice count: 1
2024-08-06 11:16:21,222 | INFO | tts.py | 85 | <module> | =================== loaded tts models ===================
2024-08-06 11:16:21,222 | INFO | tts.py | 87 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:16:25,101 | ERROR | tts.py | 100 | <module> | too many dimensions 'str'
2024-08-06 11:18:01,004 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:18:01,004 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:18:01,004 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:18:01,004 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:18:01,004 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:18:01,004 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:18:02,334 | INFO | tts.py | 87 | <module> | tts voice count: 1
2024-08-06 11:18:02,334 | INFO | tts.py | 88 | <module> | =================== loaded tts models ===================
2024-08-06 11:18:02,334 | INFO | tts.py | 90 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:18:06,978 | ERROR | tts.py | 103 | <module> | too many dimensions 'str'
2024-08-06 11:20:21,734 | INFO | config.py | 45 | <module> | =============== provided voices ============
2024-08-06 11:20:21,734 | INFO | config.py | 46 | <module> | [Voice(id='2c2f8911-7a67-446c-aadf-9b8397eb1d76', name='F-A2-B-021', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_021', train_info={'train_steps': 111}), Voice(id='b540ea02-6c7a-478e-9e60-5d766118f84a', name='m_basic', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='unknown', dataset_detail=None, train_info={'train_steps': None}), Voice(id='6d011056-6c16-44f0-a46a-4948460621cd', name='KSS', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='FEMAIL', type='NORMAL', dataset='kss dataset', dataset_detail='Korean Single Speaker Speech Dataset', train_info={'train_steps': 111}), Voice(id='407f4e67-a488-479f-a807-271e1b66dab0', name='F-H3-D-005', model_id='6c8d49f3-50b4-4025-bf5b-16e813a2686d', model_desc='m_tts_ko_pretrained_model', language='kr', gender='MAIL', type='GU-YEON-CHE', dataset='ai-hub', dataset_detail='133.감성 및 발화 스타일 동시 고려 음성합성 데이터 - TL_구연체_005', train_info={'train_steps': 111})]
2024-08-06 11:20:21,734 | INFO | config.py | 48 | <module> | ============== voice ids ============
2024-08-06 11:20:21,734 | INFO | config.py | 49 | <module> | {'6c8d49f3-50b4-4025-bf5b-16e813a2686d': ['2c2f8911-7a67-446c-aadf-9b8397eb1d76', 'b540ea02-6c7a-478e-9e60-5d766118f84a', '6d011056-6c16-44f0-a46a-4948460621cd', '407f4e67-a488-479f-a807-271e1b66dab0']}
2024-08-06 11:20:21,734 | INFO | tts.py | 65 | _get_model_info | config path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/config.json
2024-08-06 11:20:21,734 | INFO | tts.py | 68 | _get_model_info | ckpt path: /ssd_data/code/aibox_tts/models/6c8d49f3-50b4-4025-bf5b-16e813a2686d/2c2f8911-7a67-446c-aadf-9b8397eb1d76/G.pth
2024-08-06 11:20:24,145 | INFO | tts.py | 87 | <module> | tts voice count: 1
2024-08-06 11:20:24,145 | INFO | tts.py | 88 | <module> | =================== loaded tts models ===================
2024-08-06 11:20:24,145 | INFO | tts.py | 90 | <module> | TTS(
  (model): SynthesizerTrn(
    (enc_p): TextEncoder(
      (emb): Embedding(219, 192)
      (tone_emb): Embedding(16, 192)
      (language_emb): Embedding(8, 192)
      (bert_proj): Conv1d(1024, 192, kernel_size=(1,), stride=(1,))
      (ja_bert_proj): Conv1d(768, 192, kernel_size=(1,), stride=(1,))
      (encoder): Encoder(
        (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (attn_layers): ModuleList(
          (0-5): 6 x MultiHeadAttention(
            (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_1): ModuleList(
          (0-5): 6 x LayerNorm()
        )
        (ffn_layers): ModuleList(
          (0-5): 6 x FFN(
            (conv_1): Conv1d(192, 768, kernel_size=(3,), stride=(1,))
            (conv_2): Conv1d(768, 192, kernel_size=(3,), stride=(1,))
            (drop): Dropout(p=0.1, inplace=False)
          )
        )
        (norm_layers_2): ModuleList(
          (0-5): 6 x LayerNorm()
        )
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (dec): Generator(
      (conv_pre): Conv1d(192, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
        (1): ConvTranspose1d(256, 128, kernel_size=(16,), stride=(8,), padding=(4,))
        (2): ConvTranspose1d(128, 64, kernel_size=(8,), stride=(2,), padding=(3,))
        (3): ConvTranspose1d(64, 32, kernel_size=(2,), stride=(2,))
        (4): ConvTranspose1d(32, 16, kernel_size=(2,), stride=(2,))
      )
      (resblocks): ModuleList(
        (0): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (1): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (2): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (3): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (4): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (5): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (6): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (7): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (8): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (9): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (10): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (11): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
        (12): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,))
          )
        )
        (13): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(7,), stride=(1,), padding=(3,))
          )
        )
        (14): ResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(16, 16, kernel_size=(11,), stride=(1,), padding=(5,))
          )
        )
      )
      (conv_post): Conv1d(16, 1, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
      (cond): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    )
    (enc_q): PosteriorEncoder(
      (pre): Conv1d(1025, 192, kernel_size=(1,), stride=(1,))
      (enc): WN(
        (in_layers): ModuleList(
          (0-15): 16 x Conv1d(192, 384, kernel_size=(5,), stride=(1,), padding=(2,))
        )
        (res_skip_layers): ModuleList(
          (0-14): 15 x Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (15): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (drop): Dropout(p=0, inplace=False)
        (cond_layer): Conv1d(256, 6144, kernel_size=(1,), stride=(1,))
      )
      (proj): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
    )
    (flow): TransformerCouplingBlock(
      (flows): ModuleList(
        (0): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (1): Flip()
        (2): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (3): Flip()
        (4): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (5): Flip()
        (6): TransformerCouplingLayer(
          (pre): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (enc): Encoder(
            (spk_emb_linear): Linear(in_features=256, out_features=192, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
            (attn_layers): ModuleList(
              (0-2): 3 x MultiHeadAttention(
                (conv_q): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_k): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_v): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (conv_o): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (ffn_layers): ModuleList(
              (0-2): 3 x FFN(
                (conv_1): Conv1d(192, 768, kernel_size=(5,), stride=(1,))
                (conv_2): Conv1d(768, 192, kernel_size=(5,), stride=(1,))
                (drop): Dropout(p=0.1, inplace=False)
              )
            )
            (norm_layers_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (post): Conv1d(192, 96, kernel_size=(1,), stride=(1,))
        )
        (7): Flip()
      )
    )
    (sdp): StochasticDurationPredictor(
      (log_flow): Log()
      (flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (post_pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
      (post_proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (post_convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (post_flows): ModuleList(
        (0): ElementwiseAffine()
        (1): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (2): Flip()
        (3): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (4): Flip()
        (5): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (6): Flip()
        (7): ConvFlow(
          (pre): Conv1d(1, 192, kernel_size=(1,), stride=(1,))
          (convs): DDSConv(
            (drop): Dropout(p=0.0, inplace=False)
            (convs_sep): ModuleList(
              (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
              (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
              (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
            )
            (convs_1x1): ModuleList(
              (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
            )
            (norms_1): ModuleList(
              (0-2): 3 x LayerNorm()
            )
            (norms_2): ModuleList(
              (0-2): 3 x LayerNorm()
            )
          )
          (proj): Conv1d(192, 29, kernel_size=(1,), stride=(1,))
        )
        (8): Flip()
      )
      (pre): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (proj): Conv1d(192, 192, kernel_size=(1,), stride=(1,))
      (convs): DDSConv(
        (drop): Dropout(p=0.5, inplace=False)
        (convs_sep): ModuleList(
          (0): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(1,), groups=192)
          (1): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,), groups=192)
          (2): Conv1d(192, 192, kernel_size=(3,), stride=(1,), padding=(9,), dilation=(9,), groups=192)
        )
        (convs_1x1): ModuleList(
          (0-2): 3 x Conv1d(192, 192, kernel_size=(1,), stride=(1,))
        )
        (norms_1): ModuleList(
          (0-2): 3 x LayerNorm()
        )
        (norms_2): ModuleList(
          (0-2): 3 x LayerNorm()
        )
      )
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (dp): DurationPredictor(
      (drop): Dropout(p=0.5, inplace=False)
      (conv_1): Conv1d(192, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_1): LayerNorm()
      (conv_2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm_2): LayerNorm()
      (proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      (cond): Conv1d(256, 192, kernel_size=(1,), stride=(1,))
    )
    (emb_g): Embedding(1, 256)
  )
)
2024-08-06 11:20:28,171 | ERROR | tts.py | 103 | <module> | No format specified and unable to get format from file extension: '/data/aibox_tts/data/tmp'
